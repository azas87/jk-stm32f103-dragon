; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM32L152D-EVAL\usb_prop.o --asm_dir=.\STM32L152D-EVAL\ --list_dir=.\STM32L152D-EVAL\ --depend=.\STM32L152D-EVAL\usb_prop.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152D_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\src\usb_prop.c]
                          THUMB

                          AREA ||i.Joystick_Data_Setup||, CODE, READONLY, ALIGN=2

                  Joystick_Data_Setup PROC
;;;243    *******************************************************************************/
;;;244    RESULT Joystick_Data_Setup(uint8_t RequestNo)
000000  4912              LDR      r1,|L1.76|
;;;245    {
000002  b510              PUSH     {r4,lr}
;;;246      uint8_t *(*CopyRoutine)(uint16_t);
;;;247    
;;;248      CopyRoutine = NULL;
;;;249      if ((RequestNo == GET_DESCRIPTOR)
;;;250          && (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
000004  680a              LDR      r2,[r1,#0]
000006  2806              CMP      r0,#6                 ;249
000008  7811              LDRB     r1,[r2,#0]
00000a  f001017f          AND      r1,r1,#0x7f
00000e  d103              BNE      |L1.24|
000010  2901              CMP      r1,#1
000012  d101              BNE      |L1.24|
;;;251          && (pInformation->USBwIndex0 == 0))
000014  7953              LDRB     r3,[r2,#5]
000016  b113              CBZ      r3,|L1.30|
                  |L1.24|
;;;252      {
;;;253    
;;;254        if (pInformation->USBwValue1 == REPORT_DESCRIPTOR)
;;;255        {
;;;256          CopyRoutine = Joystick_GetReportDescriptor;
;;;257        }
;;;258        else if (pInformation->USBwValue1 == HID_DESCRIPTOR_TYPE)
;;;259        {
;;;260          CopyRoutine = Joystick_GetHIDDescriptor;
;;;261        }
;;;262    
;;;263      } /* End of GET_DESCRIPTOR */
;;;264    
;;;265      /*** GET_PROTOCOL ***/
;;;266      else if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000018  2921              CMP      r1,#0x21
00001a  d00a              BEQ      |L1.50|
00001c  e013              B        |L1.70|
                  |L1.30|
00001e  7890              LDRB     r0,[r2,#2]            ;254
000020  2822              CMP      r0,#0x22              ;254
000022  d002              BEQ      |L1.42|
000024  2821              CMP      r0,#0x21              ;258
000026  d002              BEQ      |L1.46|
000028  e00d              B        |L1.70|
                  |L1.42|
00002a  4909              LDR      r1,|L1.80|
00002c  e004              B        |L1.56|
                  |L1.46|
00002e  4909              LDR      r1,|L1.84|
000030  e002              B        |L1.56|
                  |L1.50|
;;;267               && RequestNo == GET_PROTOCOL)
000032  2803              CMP      r0,#3
000034  d107              BNE      |L1.70|
;;;268      {
;;;269        CopyRoutine = Joystick_GetProtocolValue;
000036  4908              LDR      r1,|L1.88|
                  |L1.56|
;;;270      }
;;;271    
;;;272    
;;;273      if (CopyRoutine == NULL)
000038  b129              CBZ      r1,|L1.70|
;;;274      {
;;;275        return USB_UNSUPPORT;
;;;276      }
;;;277    
;;;278      pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;279      pInformation->Ctrl_Info.Usb_wOffset = 0;
00003a  2000              MOVS     r0,#0
00003c  6191              STR      r1,[r2,#0x18]
00003e  8250              STRH     r0,[r2,#0x12]
;;;280      (*CopyRoutine)(0);
000040  4788              BLX      r1
;;;281      return USB_SUCCESS;
000042  2000              MOVS     r0,#0
;;;282    }
000044  bd10              POP      {r4,pc}
                  |L1.70|
000046  2002              MOVS     r0,#2                 ;275
000048  bd10              POP      {r4,pc}
;;;283    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      pInformation
                  |L1.80|
                          DCD      Joystick_GetReportDescriptor
                  |L1.84|
                          DCD      Joystick_GetHIDDescriptor
                  |L1.88|
                          DCD      Joystick_GetProtocolValue

                          AREA ||i.Joystick_GetConfigDescriptor||, CODE, READONLY, ALIGN=2

                  Joystick_GetConfigDescriptor PROC
;;;323    *******************************************************************************/
;;;324    uint8_t *Joystick_GetConfigDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L2.8|
;;;325    {
;;;326      return Standard_GetDescriptorData(Length, &Config_Descriptor);
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;327    }
;;;328    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||area_number.20||+0xc

                          AREA ||i.Joystick_GetDeviceDescriptor||, CODE, READONLY, ALIGN=2

                  Joystick_GetDeviceDescriptor PROC
;;;311    *******************************************************************************/
;;;312    uint8_t *Joystick_GetDeviceDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L3.8|
;;;313    {
;;;314      return Standard_GetDescriptorData(Length, &Device_Descriptor);
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;315    }
;;;316    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||area_number.20||+0x4

                          AREA ||i.Joystick_GetHIDDescriptor||, CODE, READONLY, ALIGN=2

                  Joystick_GetHIDDescriptor PROC
;;;367    *******************************************************************************/
;;;368    uint8_t *Joystick_GetHIDDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L4.8|
;;;369    {
;;;370      return Standard_GetDescriptorData(Length, &Mouse_Hid_Descriptor);
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;371    }
;;;372    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||area_number.20||+0x1c

                          AREA ||i.Joystick_GetProtocolValue||, CODE, READONLY, ALIGN=2

                  Joystick_GetProtocolValue PROC
;;;415    *******************************************************************************/
;;;416    uint8_t *Joystick_GetProtocolValue(uint16_t Length)
000000  b108              CBZ      r0,|L5.6|
;;;417    {
;;;418      if (Length == 0)
;;;419      {
;;;420        pInformation->Ctrl_Info.Usb_wLength = 1;
;;;421        return NULL;
;;;422      }
;;;423      else
;;;424      {
;;;425        return (uint8_t *)(&ProtocolValue);
000002  4804              LDR      r0,|L5.20|
;;;426      }
;;;427    }
000004  4770              BX       lr
                  |L5.6|
000006  4904              LDR      r1,|L5.24|
000008  2001              MOVS     r0,#1                 ;420
00000a  6809              LDR      r1,[r1,#0]            ;420  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]         ;420
00000e  2000              MOVS     r0,#0                 ;421
000010  4770              BX       lr
;;;428    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      ||area_number.20||
                  |L5.24|
                          DCD      pInformation

                          AREA ||i.Joystick_GetReportDescriptor||, CODE, READONLY, ALIGN=2

                  Joystick_GetReportDescriptor PROC
;;;355    *******************************************************************************/
;;;356    uint8_t *Joystick_GetReportDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L6.8|
;;;357    {
;;;358      return Standard_GetDescriptorData(Length, &Joystick_Report_Descriptor);
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;359    }
;;;360    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      ||area_number.20||+0x14

                          AREA ||i.Joystick_GetStringDescriptor||, CODE, READONLY, ALIGN=2

                  Joystick_GetStringDescriptor PROC
;;;335    *******************************************************************************/
;;;336    uint8_t *Joystick_GetStringDescriptor(uint16_t Length)
000000  4905              LDR      r1,|L7.24|
;;;337    {
;;;338      uint8_t wValue0 = pInformation->USBwValue0;
000002  6809              LDR      r1,[r1,#0]  ; pInformation
000004  78c9              LDRB     r1,[r1,#3]
;;;339      if (wValue0 > 4)
000006  2904              CMP      r1,#4
000008  d901              BLS      |L7.14|
;;;340      {
;;;341        return NULL;
00000a  2000              MOVS     r0,#0
;;;342      }
;;;343      else
;;;344      {
;;;345        return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
;;;346      }
;;;347    }
00000c  4770              BX       lr
                  |L7.14|
00000e  4a03              LDR      r2,|L7.28|
000010  eb0201c1          ADD      r1,r2,r1,LSL #3       ;345
000014  f7ffbffe          B.W      Standard_GetDescriptorData
;;;348    
                          ENDP

                  |L7.24|
                          DCD      pInformation
                  |L7.28|
                          DCD      ||area_number.20||+0x54

                          AREA ||i.Joystick_Get_Interface_Setting||, CODE, READONLY, ALIGN=1

                  Joystick_Get_Interface_Setting PROC
;;;381    *******************************************************************************/
;;;382    RESULT Joystick_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
000000  b909              CBNZ     r1,|L8.6|
;;;383    {
;;;384      if (AlternateSetting > 0)
;;;385      {
;;;386        return USB_UNSUPPORT;
;;;387      }
;;;388      else if (Interface > 0)
000002  2800              CMP      r0,#0
000004  d000              BEQ      |L8.8|
                  |L8.6|
;;;389      {
;;;390        return USB_UNSUPPORT;
000006  2002              MOVS     r0,#2
                  |L8.8|
;;;391      }
;;;392      return USB_SUCCESS;
;;;393    }
000008  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.Joystick_NoData_Setup||, CODE, READONLY, ALIGN=2

                  Joystick_NoData_Setup PROC
;;;290    *******************************************************************************/
;;;291    RESULT Joystick_NoData_Setup(uint8_t RequestNo)
000000  4906              LDR      r1,|L9.28|
;;;292    {
;;;293      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000002  6809              LDR      r1,[r1,#0]  ; pInformation
000004  7809              LDRB     r1,[r1,#0]
000006  f001017f          AND      r1,r1,#0x7f
00000a  2921              CMP      r1,#0x21
00000c  d101              BNE      |L9.18|
;;;294          && (RequestNo == SET_PROTOCOL))
00000e  280b              CMP      r0,#0xb
000010  d001              BEQ      |L9.22|
                  |L9.18|
;;;295      {
;;;296        return Joystick_SetProtocol();
;;;297      }
;;;298    
;;;299      else
;;;300      {
;;;301        return USB_UNSUPPORT;
000012  2002              MOVS     r0,#2
;;;302      }
;;;303    }
000014  4770              BX       lr
                  |L9.22|
000016  f7ffbffe          B.W      Joystick_SetProtocol
;;;304    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      pInformation

                          AREA ||i.Joystick_Reset||, CODE, READONLY, ALIGN=2

                  Joystick_Reset PROC
;;;148    *******************************************************************************/
;;;149    void Joystick_Reset(void)
000000  4822              LDR      r0,|L10.140|
;;;150    {
000002  b510              PUSH     {r4,lr}
;;;151      /* Set Joystick_DEVICE as not configured */
;;;152      pInformation->Current_Configuration = 0;
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  2100              MOVS     r1,#0
000008  7281              STRB     r1,[r0,#0xa]
;;;153      pInformation->Current_Interface = 0;/*the default Interface*/
00000a  72c1              STRB     r1,[r0,#0xb]
;;;154    
;;;155      /* Current Feature initialization */
;;;156      pInformation->Current_Feature = Joystick_ConfigDescriptor[7];
00000c  4920              LDR      r1,|L10.144|
00000e  79c9              LDRB     r1,[r1,#7]  ; Joystick_ConfigDescriptor
000010  7241              STRB     r1,[r0,#9]
;;;157    
;;;158    #ifdef STM32F10X_CL   
;;;159      /* EP0 is already configured in DFU_Init() by USB_SIL_Init() function */
;;;160      
;;;161      /* Init EP1 IN as Interrupt endpoint */
;;;162      OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_INT, 4);
;;;163    #else 
;;;164    
;;;165      SetBTABLE(BTABLE_ADDRESS);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       SetBTABLE
;;;166    
;;;167      /* Initialize Endpoint 0 */
;;;168      SetEPType(ENDP0, EP_CONTROL);
000018  f44f7100          MOV      r1,#0x200
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SetEPType
;;;169      SetEPTxStatus(ENDP0, EP_TX_STALL);
000022  2110              MOVS     r1,#0x10
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       SetEPTxStatus
;;;170      SetEPRxAddr(ENDP0, ENDP0_RXADDR);
00002a  2118              MOVS     r1,#0x18
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       SetEPRxAddr
;;;171      SetEPTxAddr(ENDP0, ENDP0_TXADDR);
000032  2158              MOVS     r1,#0x58
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       SetEPTxAddr
;;;172      Clear_Status_Out(ENDP0);
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       Clear_Status_Out
;;;173      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000040  4814              LDR      r0,|L10.148|
000042  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       SetEPRxCount
;;;174      SetEPRxValid(ENDP0);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       SetEPRxValid
;;;175    
;;;176      /* Initialize Endpoint 1 */
;;;177      SetEPType(ENDP1, EP_INTERRUPT);
000052  f44f61c0          MOV      r1,#0x600
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       SetEPType
;;;178      SetEPTxAddr(ENDP1, ENDP1_TXADDR);
00005c  f44f7180          MOV      r1,#0x100
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       SetEPTxAddr
;;;179      SetEPTxCount(ENDP1, 4);
000066  2104              MOVS     r1,#4
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       SetEPTxCount
;;;180      SetEPRxStatus(ENDP1, EP_RX_DIS);
00006e  2100              MOVS     r1,#0
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       SetEPRxStatus
;;;181      SetEPTxStatus(ENDP1, EP_TX_NAK);
000076  2120              MOVS     r1,#0x20
000078  2001              MOVS     r0,#1
00007a  f7fffffe          BL       SetEPTxStatus
;;;182    
;;;183      /* Set this device to response on default address */
;;;184      SetDeviceAddress(0);
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       SetDeviceAddress
;;;185    #endif /* STM32F10X_CL */
;;;186    
;;;187      bDeviceState = ATTACHED;
000084  4904              LDR      r1,|L10.152|
000086  2001              MOVS     r0,#1
000088  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;188    }
00008a  bd10              POP      {r4,pc}
;;;189    /*******************************************************************************
                          ENDP

                  |L10.140|
                          DCD      pInformation
                  |L10.144|
                          DCD      Joystick_ConfigDescriptor
                  |L10.148|
                          DCD      ||area_number.20||+0x24
                  |L10.152|
                          DCD      bDeviceState

                          AREA ||i.Joystick_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Joystick_SetConfiguration PROC
;;;195    *******************************************************************************/
;;;196    void Joystick_SetConfiguration(void)
000000  4803              LDR      r0,|L11.16|
;;;197    {
;;;198      DEVICE_INFO *pInfo = &Device_Info;
;;;199    
;;;200      if (pInfo->Current_Configuration != 0)
000002  7a80              LDRB     r0,[r0,#0xa]
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L11.14|
;;;201      {
;;;202        /* Device configured */
;;;203        bDeviceState = CONFIGURED;
000008  4902              LDR      r1,|L11.20|
00000a  2005              MOVS     r0,#5
00000c  6008              STR      r0,[r1,#0]  ; bDeviceState
                  |L11.14|
;;;204      }
;;;205    }
00000e  4770              BX       lr
;;;206    /*******************************************************************************
                          ENDP

                  |L11.16|
                          DCD      Device_Info
                  |L11.20|
                          DCD      bDeviceState

                          AREA ||i.Joystick_SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  Joystick_SetDeviceAddress PROC
;;;212    *******************************************************************************/
;;;213    void Joystick_SetDeviceAddress (void)
000000  4901              LDR      r1,|L12.8|
;;;214    {
;;;215      bDeviceState = ADDRESSED;
000002  2004              MOVS     r0,#4
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;216    }
000006  4770              BX       lr
;;;217    /*******************************************************************************
                          ENDP

                  |L12.8|
                          DCD      bDeviceState

                          AREA ||i.Joystick_SetProtocol||, CODE, READONLY, ALIGN=2

                  Joystick_SetProtocol PROC
;;;401    *******************************************************************************/
;;;402    RESULT Joystick_SetProtocol(void)
000000  4803              LDR      r0,|L13.16|
;;;403    {
;;;404      uint8_t wValue0 = pInformation->USBwValue0;
;;;405      ProtocolValue = wValue0;
000002  4904              LDR      r1,|L13.20|
000004  6800              LDR      r0,[r0,#0]            ;404  ; pInformation
000006  78c0              LDRB     r0,[r0,#3]            ;404
;;;406      return USB_SUCCESS;
000008  6008              STR      r0,[r1,#0]  ; ProtocolValue
00000a  2000              MOVS     r0,#0
;;;407    }
00000c  4770              BX       lr
;;;408    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      pInformation
                  |L13.20|
                          DCD      ||area_number.20||

                          AREA ||i.Joystick_Status_In||, CODE, READONLY, ALIGN=1

                  Joystick_Status_In PROC
;;;223    *******************************************************************************/
;;;224    void Joystick_Status_In(void)
000000  4770              BX       lr
;;;225    {}
;;;226    
                          ENDP


                          AREA ||i.Joystick_Status_Out||, CODE, READONLY, ALIGN=1

                  Joystick_Status_Out PROC
;;;233    *******************************************************************************/
;;;234    void Joystick_Status_Out (void)
000000  4770              BX       lr
;;;235    {}
;;;236    
                          ENDP


                          AREA ||i.Joystick_init||, CODE, READONLY, ALIGN=2

                  Joystick_init PROC
;;;124    *******************************************************************************/
;;;125    void Joystick_init(void)
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127    
;;;128      /* Update the serial number string descriptor with the data from the unique
;;;129      ID*/
;;;130      Get_SerialNum();
000002  f7fffffe          BL       Get_SerialNum
;;;131    
;;;132      pInformation->Current_Configuration = 0;
000006  4805              LDR      r0,|L16.28|
000008  2400              MOVS     r4,#0
00000a  6800              LDR      r0,[r0,#0]  ; pInformation
00000c  7284              STRB     r4,[r0,#0xa]
;;;133      /* Connect the device */
;;;134      PowerOn();
00000e  f7fffffe          BL       PowerOn
;;;135    
;;;136      /* Perform basic device initialization operations */
;;;137      USB_SIL_Init();
000012  f7fffffe          BL       USB_SIL_Init
;;;138    
;;;139      bDeviceState = UNCONNECTED;
000016  4802              LDR      r0,|L16.32|
000018  6004              STR      r4,[r0,#0]  ; bDeviceState
;;;140    }
00001a  bd10              POP      {r4,pc}
;;;141    
                          ENDP

                  |L16.28|
                          DCD      pInformation
                  |L16.32|
                          DCD      bDeviceState

                          AREA ||.data||, DATA, ALIGN=0

                  Device_Table
000000  0201              DCB      0x02,0x01

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  ProtocolValue
                          DCD      0x00000000
                  Device_Descriptor
                          DCD      Joystick_DeviceDescriptor
000008  0012              DCW      0x0012
00000a  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      Joystick_ConfigDescriptor
000010  0022              DCW      0x0022
000012  0000              DCB      0x00,0x00
                  Joystick_Report_Descriptor
                          DCD      Joystick_ReportDescriptor
000018  004a              DCW      0x004a
00001a  0000              DCB      0x00,0x00
                  Mouse_Hid_Descriptor
                          DCD      Joystick_ConfigDescriptor+0x12
000020  0009              DCW      0x0009
000022  0000              DCB      0x00,0x00
                  Device_Property
                          DCD      Joystick_init
                          DCD      Joystick_Reset
                          DCD      Joystick_Status_In
                          DCD      Joystick_Status_Out
                          DCD      Joystick_Data_Setup
                          DCD      Joystick_NoData_Setup
                          DCD      Joystick_Get_Interface_Setting
                          DCD      Joystick_GetDeviceDescriptor
                          DCD      Joystick_GetConfigDescriptor
                          DCD      Joystick_GetStringDescriptor
                          DCD      0x00000000
000050  40000000          DCB      0x40,0x00,0x00,0x00
                  String_Descriptor
                          DCD      Joystick_StringLangID
000058  0004              DCW      0x0004
00005a  0000              DCB      0x00,0x00
                          DCD      Joystick_StringVendor
000060  0026              DCW      0x0026
000062  0000              DCB      0x00,0x00
                          DCD      Joystick_StringProduct
000068  001e              DCW      0x001e
00006a  0000              DCB      0x00,0x00
                          DCD      Joystick_StringSerial
000070  001a              DCW      0x001a
000072  0000              DCB      0x00,0x00

                          AREA ||area_number.21||, DATA, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.data||
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      Joystick_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Joystick_SetDeviceAddress

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_prop.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usb_prop_c_e95c9bdd____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_prop_c_e95c9bdd____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usb_prop_c_e95c9bdd____REVSH|
#line 128
|__asm___10_usb_prop_c_e95c9bdd____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
