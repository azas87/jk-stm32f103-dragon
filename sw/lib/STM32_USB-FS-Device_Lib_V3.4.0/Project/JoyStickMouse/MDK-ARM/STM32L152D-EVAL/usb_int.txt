; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM32L152D-EVAL\usb_int.o --asm_dir=.\STM32L152D-EVAL\ --list_dir=.\STM32L152D-EVAL\ --depend=.\STM32L152D-EVAL\usb_int.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152D_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_int.c]
                          THUMB

                          AREA ||i.CTR_HP||, CODE, READONLY, ALIGN=2

                  CTR_HP PROC
;;;164    *******************************************************************************/
;;;165    void CTR_HP(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166    {
;;;167      uint32_t wEPVal = 0;
;;;168    
;;;169      while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
;;;170      {
;;;171        _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
000004  4d18              LDR      r5,|L1.104|
;;;172        /* extract highest priority endpoint number */
;;;173        EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
000006  4c17              LDR      r4,|L1.100|
;;;174        /* process related endpoint register */
;;;175        wEPVal = _GetENDPOINT(EPindex);
000008  4f17              LDR      r7,|L1.104|
00000a  3544              ADDS     r5,r5,#0x44           ;171
00000c  4e17              LDR      r6,|L1.108|
00000e  e023              B        |L1.88|
                  |L1.16|
000010  f64770ff          MOV      r0,#0x7fff            ;171
000014  6028              STR      r0,[r5,#0]            ;171
000016  8830              LDRH     r0,[r6,#0]            ;173  ; wIstr
000018  f000000f          AND      r0,r0,#0xf            ;173
00001c  7020              STRB     r0,[r4,#0]            ;173
00001e  eb070080          ADD      r0,r7,r0,LSL #2
000022  6801              LDR      r1,[r0,#0]
000024  b289              UXTH     r1,r1
;;;176        if ((wEPVal & EP_CTR_RX) != 0)
000026  040a              LSLS     r2,r1,#16
000028  d507              BPL      |L1.58|
;;;177        {
;;;178          /* clear int flag */
;;;179          _ClearEP_CTR_RX(EPindex);
00002a  6801              LDR      r1,[r0,#0]
00002c  f640728f          MOV      r2,#0xf8f
000030  b289              UXTH     r1,r1
000032  4011              ANDS     r1,r1,r2
000034  6001              STR      r1,[r0,#0]
;;;180    
;;;181          /* call OUT service function */
;;;182          (*pEpInt_OUT[EPindex-1])();
000036  480e              LDR      r0,|L1.112|
000038  e008              B        |L1.76|
                  |L1.58|
;;;183    
;;;184        } /* if((wEPVal & EP_CTR_RX) */
;;;185        else if ((wEPVal & EP_CTR_TX) != 0)
00003a  0609              LSLS     r1,r1,#24
00003c  d50c              BPL      |L1.88|
;;;186        {
;;;187          /* clear int flag */
;;;188          _ClearEP_CTR_TX(EPindex);
00003e  6801              LDR      r1,[r0,#0]
000040  f648720f          MOV      r2,#0x8f0f
000044  b289              UXTH     r1,r1
000046  4011              ANDS     r1,r1,r2
000048  6001              STR      r1,[r0,#0]
;;;189    
;;;190          /* call IN service function */
;;;191          (*pEpInt_IN[EPindex-1])();
00004a  480a              LDR      r0,|L1.116|
                  |L1.76|
00004c  7821              LDRB     r1,[r4,#0]  ; EPindex
00004e  eb000081          ADD      r0,r0,r1,LSL #2
000052  f8500c04          LDR      r0,[r0,#-4]
000056  4780              BLX      r0
                  |L1.88|
000058  6828              LDR      r0,[r5,#0]            ;169
00005a  8030              STRH     r0,[r6,#0]            ;169
00005c  0400              LSLS     r0,r0,#16             ;169
00005e  d4d7              BMI      |L1.16|
;;;192    
;;;193    
;;;194        } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;195    
;;;196      }/* while(...) */
;;;197    }
000060  e8bd81f0          POP      {r4-r8,pc}
;;;198    
                          ENDP

                  |L1.100|
                          DCD      EPindex
                  |L1.104|
                          DCD      0x40005c00
                  |L1.108|
                          DCD      wIstr
                  |L1.112|
                          DCD      pEpInt_OUT
                  |L1.116|
                          DCD      pEpInt_IN

                          AREA ||i.CTR_LP||, CODE, READONLY, ALIGN=2

                  CTR_LP PROC
;;;54     *******************************************************************************/
;;;55     void CTR_LP(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;56     {
;;;57       __IO uint16_t wEPVal = 0;
;;;58       /* stay in loop while pending interrupts */
;;;59       while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
000004  f8dfa12c          LDR      r10,|L2.308|
;;;60       {
;;;61         /* extract highest priority endpoint number */
;;;62         EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
;;;63         if (EPindex == 0)
;;;64         {
;;;65           /* Decode and service control endpoint interrupt */
;;;66           /* calling related service routine */
;;;67           /* (Setup0_Process, In0_Process, Out0_Process) */
;;;68     
;;;69           /* save RX & TX status */
;;;70           /* and set both to NAK */
;;;71     
;;;72     
;;;73     	    SaveRState = _GetENDPOINT(ENDP0);
;;;74     	    SaveTState = SaveRState & EPTX_STAT;
;;;75     	    SaveRState &=  EPRX_STAT;	
;;;76     
;;;77     	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
000008  f64b76bf          MOV      r6,#0xbfbf
00000c  f2480780          MOV      r7,#0x8080
000010  4d47              LDR      r5,|L2.304|
;;;78     
;;;79           /* DIR bit = origin of the interrupt */
;;;80     
;;;81           if ((wIstr & ISTR_DIR) == 0)
;;;82           {
;;;83             /* DIR = 0 */
;;;84     
;;;85             /* DIR = 0      => IN  int */
;;;86             /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
;;;87     
;;;88     
;;;89             _ClearEP_CTR_TX(ENDP0);
;;;90             In0_Process();
;;;91     
;;;92                /* before terminate set Tx & Rx status */
;;;93     
;;;94                 _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;95     		  return;
;;;96           }
;;;97           else
;;;98           {
;;;99             /* DIR = 1 */
;;;100    
;;;101            /* DIR = 1 & CTR_RX       => SETUP or OUT int */
;;;102            /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
;;;103    
;;;104            wEPVal = _GetENDPOINT(ENDP0);
;;;105            
;;;106            if ((wEPVal &EP_SETUP) != 0)
;;;107            {
;;;108              _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
000012  f640788f          MOV      r8,#0xf8f
000016  4c47              LDR      r4,|L2.308|
000018  f6487b0f          MOV      r11,#0x8f0f           ;89
00001c  f8df9118          LDR      r9,|L2.312|
000020  f10a0a44          ADD      r10,r10,#0x44         ;59
;;;109              Setup0_Process();
;;;110              /* before terminate set Tx & Rx status */
;;;111    
;;;112    		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;113              return;
;;;114            }
;;;115    
;;;116            else if ((wEPVal & EP_CTR_RX) != 0)
;;;117            {
;;;118              _ClearEP_CTR_RX(ENDP0);
;;;119              Out0_Process();
;;;120              /* before terminate set Tx & Rx status */
;;;121         
;;;122    		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;123              return;
;;;124            }
;;;125          }
;;;126        }/* if(EPindex == 0) */
;;;127        else
;;;128        {
;;;129          /* Decode and service non control endpoints interrupt  */
;;;130    
;;;131          /* process related endpoint register */
;;;132          wEPVal = _GetENDPOINT(EPindex);
;;;133          if ((wEPVal & EP_CTR_RX) != 0)
;;;134          {
;;;135            /* clear int flag */
;;;136            _ClearEP_CTR_RX(EPindex);
;;;137    
;;;138            /* call OUT service function */
;;;139            (*pEpInt_OUT[EPindex-1])();
;;;140    
;;;141          } /* if((wEPVal & EP_CTR_RX) */
;;;142    
;;;143          if ((wEPVal & EP_CTR_TX) != 0)
;;;144          {
;;;145            /* clear int flag */
;;;146            _ClearEP_CTR_TX(EPindex);
;;;147    
;;;148            /* call IN service function */
;;;149            (*pEpInt_IN[EPindex-1])();
000024  e02c              B        |L2.128|
                  |L2.38|
000026  8801              LDRH     r1,[r0,#0]            ;62  ; wIstr
000028  f011020f          ANDS     r2,r1,#0xf            ;62
00002c  4943              LDR      r1,|L2.316|
00002e  700a              STRB     r2,[r1,#0]            ;62
000030  d02f              BEQ      |L2.146|
000032  eb040082          ADD      r0,r4,r2,LSL #2       ;132
000036  6801              LDR      r1,[r0,#0]            ;132
000038  b289              UXTH     r1,r1                 ;132
00003a  9100              STR      r1,[sp,#0]            ;133
00003c  0409              LSLS     r1,r1,#16             ;133
00003e  d50c              BPL      |L2.90|
000040  4b3e              LDR      r3,|L2.316|
000042  6801              LDR      r1,[r0,#0]            ;136
000044  b289              UXTH     r1,r1                 ;136
000046  ea010108          AND      r1,r1,r8              ;136
00004a  6001              STR      r1,[r0,#0]            ;136
00004c  483c              LDR      r0,|L2.320|
00004e  7819              LDRB     r1,[r3,#0]            ;139  ; EPindex
000050  eb000081          ADD      r0,r0,r1,LSL #2       ;139
000054  f8500c04          LDR      r0,[r0,#-4]           ;139
000058  4780              BLX      r0                    ;139
                  |L2.90|
00005a  9800              LDR      r0,[sp,#0]            ;143
00005c  0600              LSLS     r0,r0,#24             ;143
00005e  d50f              BPL      |L2.128|
000060  4836              LDR      r0,|L2.316|
000062  7801              LDRB     r1,[r0,#0]            ;146  ; EPindex
000064  eb040181          ADD      r1,r4,r1,LSL #2       ;146
000068  680a              LDR      r2,[r1,#0]            ;146
00006a  b292              UXTH     r2,r2                 ;146
00006c  ea02020b          AND      r2,r2,r11             ;146
000070  600a              STR      r2,[r1,#0]            ;146
000072  4934              LDR      r1,|L2.324|
000074  7800              LDRB     r0,[r0,#0]  ; EPindex
000076  eb010080          ADD      r0,r1,r0,LSL #2
00007a  f8500c04          LDR      r0,[r0,#-4]
00007e  4780              BLX      r0
                  |L2.128|
000080  f8da1000          LDR      r1,[r10,#0]           ;59
000084  4648              MOV      r0,r9                 ;59
000086  f8a91000          STRH     r1,[r9,#0]            ;59
00008a  0409              LSLS     r1,r1,#16             ;59
00008c  d4cb              BMI      |L2.38|
                  |L2.142|
;;;150          } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;151    
;;;152        }/* if(EPindex == 0) else */
;;;153    
;;;154      }/* while(...) */
;;;155    }
00008e  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.146|
000092  6821              LDR      r1,[r4,#0]            ;73
000094  8029              STRH     r1,[r5,#0]            ;73
000096  8829              LDRH     r1,[r5,#0]            ;74  ; SaveRState
000098  f0010130          AND      r1,r1,#0x30           ;74
00009c  8069              STRH     r1,[r5,#2]            ;74
00009e  8829              LDRH     r1,[r5,#0]            ;75  ; SaveRState
0000a0  f4015140          AND      r1,r1,#0x3000         ;75
0000a4  8029              STRH     r1,[r5,#0]            ;75
0000a6  6821              LDR      r1,[r4,#0]            ;77
0000a8  b289              UXTH     r1,r1                 ;77
0000aa  4031              ANDS     r1,r1,r6              ;77
0000ac  f4815100          EOR      r1,r1,#0x2000         ;77
0000b0  f0810120          EOR      r1,r1,#0x20           ;77
0000b4  4339              ORRS     r1,r1,r7              ;77
0000b6  6021              STR      r1,[r4,#0]            ;77
0000b8  8800              LDRH     r0,[r0,#0]            ;81  ; wIstr
0000ba  06c0              LSLS     r0,r0,#27             ;81
0000bc  2800              CMP      r0,#0                 ;81
0000be  6820              LDR      r0,[r4,#0]            ;104
0000c0  b280              UXTH     r0,r0                 ;104
0000c2  db16              BLT      |L2.242|
0000c4  ea00000b          AND      r0,r0,r11             ;89
0000c8  6020              STR      r0,[r4,#0]            ;89
0000ca  f7fffffe          BL       In0_Process
0000ce  e023              B        |L2.280|
                  |L2.208|
0000d0  8829              LDRH     r1,[r5,#0]            ;94  ; SaveRState
0000d2  0489              LSLS     r1,r1,#18             ;94
0000d4  d501              BPL      |L2.218|
0000d6  f4805000          EOR      r0,r0,#0x2000         ;94
                  |L2.218|
0000da  8869              LDRH     r1,[r5,#2]            ;122  ; SaveTState
0000dc  06c9              LSLS     r1,r1,#27             ;122
0000de  d424              BMI      |L2.298|
                  |L2.224|
0000e0  8869              LDRH     r1,[r5,#2]            ;94  ; SaveTState
0000e2  0689              LSLS     r1,r1,#26             ;94
0000e4  d501              BPL      |L2.234|
0000e6  f0800020          EOR      r0,r0,#0x20           ;94
                  |L2.234|
0000ea  b280              UXTH     r0,r0                 ;122
0000ec  4338              ORRS     r0,r0,r7              ;122
0000ee  6020              STR      r0,[r4,#0]            ;122
0000f0  e7cd              B        |L2.142|
                  |L2.242|
0000f2  0501              LSLS     r1,r0,#20             ;106
0000f4  d507              BPL      |L2.262|
0000f6  6820              LDR      r0,[r4,#0]            ;108
0000f8  b280              UXTH     r0,r0                 ;108
0000fa  ea000008          AND      r0,r0,r8              ;108
0000fe  6020              STR      r0,[r4,#0]            ;108
000100  f7fffffe          BL       Setup0_Process
000104  e008              B        |L2.280|
                  |L2.262|
000106  0400              LSLS     r0,r0,#16             ;116
000108  d5ba              BPL      |L2.128|
00010a  6820              LDR      r0,[r4,#0]            ;118
00010c  b281              UXTH     r1,r0                 ;118
00010e  ea010108          AND      r1,r1,r8              ;118
000112  6021              STR      r1,[r4,#0]            ;118
000114  f7fffffe          BL       Out0_Process
                  |L2.280|
000118  6820              LDR      r0,[r4,#0]            ;122
00011a  8829              LDRH     r1,[r5,#0]            ;122  ; SaveRState
00011c  b280              UXTH     r0,r0                 ;122
00011e  4030              ANDS     r0,r0,r6              ;122
000120  04c9              LSLS     r1,r1,#19             ;122
000122  d5d5              BPL      |L2.208|
000124  f4805080          EOR      r0,r0,#0x1000         ;122
000128  e7d2              B        |L2.208|
                  |L2.298|
00012a  f0800010          EOR      r0,r0,#0x10           ;122
00012e  e7d7              B        |L2.224|
;;;156    
                          ENDP

                  |L2.304|
                          DCD      ||.data||
                  |L2.308|
                          DCD      0x40005c00
                  |L2.312|
                          DCD      wIstr
                  |L2.316|
                          DCD      EPindex
                  |L2.320|
                          DCD      pEpInt_OUT
                  |L2.324|
                          DCD      pEpInt_IN

                          AREA ||.data||, DATA, ALIGN=1

                  SaveRState
000000  0000              DCB      0x00,0x00
                  SaveTState
000002  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32_USB-FS-Device_Driver\\src\\usb_int.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_usb_int_c_CTR_LP____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_int_c_CTR_LP____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_usb_int_c_CTR_LP____REVSH|
#line 128
|__asm___9_usb_int_c_CTR_LP____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
