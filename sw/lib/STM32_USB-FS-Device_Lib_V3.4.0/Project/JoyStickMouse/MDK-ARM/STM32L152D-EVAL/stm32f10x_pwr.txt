; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM32L152D-EVAL\stm32f10x_pwr.o --asm_dir=.\STM32L152D-EVAL\ --list_dir=.\STM32L152D-EVAL\ --depend=.\STM32L152D-EVAL\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152D_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;129      */
;;;130    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;131    {
;;;132      /* Check the parameters */
;;;133      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;134      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;135    }
000004  4770              BX       lr
;;;136    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;292      */
;;;293    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4902              LDR      r1,|L2.12|
;;;294    {
;;;295      /* Check the parameters */
;;;296      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;297             
;;;298      PWR->CR |=  PWR_FLAG << 2;
000002  680a              LDR      r2,[r1,#0]
000004  ea420080          ORR      r0,r2,r0,LSL #2
000008  6008              STR      r0,[r1,#0]
;;;299    }
00000a  4770              BX       lr
;;;300    
                          ENDP

                  |L2.12|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;117      */
;;;118    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  070c              LSLS     r4,r1,#28
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;121      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;122    }
;;;123    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;241      */
;;;242    void PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L4.32|
;;;243    {
;;;244      /* Clear Wake-up flag */
;;;245      PWR->CR |= PWR_CR_CWUF;
000002  6801              LDR      r1,[r0,#0]
000004  f0410104          ORR      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;246      /* Select STANDBY mode */
;;;247      PWR->CR |= PWR_CR_PDDS;
00000a  6801              LDR      r1,[r0,#0]
00000c  f0410102          ORR      r1,r1,#2
000010  6001              STR      r1,[r0,#0]
;;;248      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;249      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000012  4804              LDR      r0,|L4.36|
000014  6801              LDR      r1,[r0,#0]
000016  f0410104          ORR      r1,r1,#4
00001a  6001              STR      r1,[r0,#0]
;;;250    /* This option is used to ensure that store operations are completed */
;;;251    #if defined ( __CC_ARM   )
;;;252      __force_stores();
;;;253    #endif
;;;254      /* Request Wait For Interrupt */
;;;255      __WFI();
00001c  bf30              WFI      
;;;256    }
00001e  4770              BX       lr
;;;257    
                          ENDP

                  |L4.32|
                          DCD      0x40007000
                  |L4.36|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;202      */
;;;203    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  4b0a              LDR      r3,|L5.44|
;;;204    {
;;;205      uint32_t tmpreg = 0;
;;;206      /* Check the parameters */
;;;207      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;208      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;209      
;;;210      /* Select the regulator state in STOP mode ---------------------------------*/
;;;211      tmpreg = PWR->CR;
000002  681a              LDR      r2,[r3,#0]
;;;212      /* Clear PDDS and LPDS bits */
;;;213      tmpreg &= CR_DS_MASK;
000004  f0220203          BIC      r2,r2,#3
;;;214      /* Set LPDS bit according to PWR_Regulator value */
;;;215      tmpreg |= PWR_Regulator;
000008  4302              ORRS     r2,r2,r0
;;;216      /* Store the new value */
;;;217      PWR->CR = tmpreg;
00000a  601a              STR      r2,[r3,#0]
;;;218      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;219      SCB->SCR |= SCB_SCR_SLEEPDEEP;
00000c  4808              LDR      r0,|L5.48|
00000e  6802              LDR      r2,[r0,#0]
000010  f0420204          ORR      r2,r2,#4
000014  6002              STR      r2,[r0,#0]
;;;220      
;;;221      /* Select STOP mode entry --------------------------------------------------*/
;;;222      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000016  2901              CMP      r1,#1
000018  d005              BEQ      |L5.38|
;;;223      {   
;;;224        /* Request Wait For Interrupt */
;;;225        __WFI();
;;;226      }
;;;227      else
;;;228      {
;;;229        /* Request Wait For Event */
;;;230        __WFE();
00001a  bf20              WFE      
                  |L5.28|
;;;231      }
;;;232      
;;;233      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;234      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
00001c  6801              LDR      r1,[r0,#0]
00001e  f0210104          BIC      r1,r1,#4
000022  6001              STR      r1,[r0,#0]
;;;235    }
000024  4770              BX       lr
                  |L5.38|
000026  bf30              WFI                            ;225
000028  e7f8              B        |L5.28|
;;;236    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40007000
                  |L5.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;266      */
;;;267    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4a03              LDR      r2,|L6.16|
;;;268    {
000002  4601              MOV      r1,r0
;;;269      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;270      /* Check the parameters */
;;;271      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;272      
;;;273      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000006  6852              LDR      r2,[r2,#4]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L6.14|
;;;274      {
;;;275        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;276      }
;;;277      else
;;;278      {
;;;279        bitstatus = RESET;
;;;280      }
;;;281      /* Return the flag status */
;;;282      return bitstatus;
;;;283    }
00000e  4770              BX       lr
;;;284    
                          ENDP

                  |L6.16|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;142      */
;;;143    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;144    {
;;;145      /* Check the parameters */
;;;146      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;147      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;148    }
000004  4770              BX       lr
;;;149    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;163      */
;;;164    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4a03              LDR      r2,|L8.16|
;;;165    {
;;;166      uint32_t tmpreg = 0;
;;;167      /* Check the parameters */
;;;168      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;169      tmpreg = PWR->CR;
000002  6811              LDR      r1,[r2,#0]
;;;170      /* Clear PLS[7:5] bits */
;;;171      tmpreg &= CR_PLS_MASK;
000004  f02101e0          BIC      r1,r1,#0xe0
;;;172      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;173      tmpreg |= PWR_PVDLevel;
000008  4301              ORRS     r1,r1,r0
;;;174      /* Store the new value */
;;;175      PWR->CR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;176    }
00000c  4770              BX       lr
;;;177    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;183      */
;;;184    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L9.8|
;;;185    {
;;;186      /* Check the parameters */
;;;187      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;188      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;189    }
000004  4770              BX       lr
;;;190    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x420e00a0

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_pwr.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_pwr_c_0c2a8b75____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_pwr_c_0c2a8b75____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_pwr_c_0c2a8b75____REVSH|
#line 128
|__asm___15_stm32f10x_pwr_c_0c2a8b75____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
