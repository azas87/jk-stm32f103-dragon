; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM32L152D-EVAL\usb_istr.o --asm_dir=.\STM32L152D-EVAL\ --list_dir=.\STM32L152D-EVAL\ --depend=.\STM32L152D-EVAL\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152D_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;76     *******************************************************************************/
;;;77     void USB_Istr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;78     {
;;;79     
;;;80       wIstr = _GetISTR();
000002  4e2a              LDR      r6,|L1.172|
000004  6830              LDR      r0,[r6,#0]
000006  4c2a              LDR      r4,|L1.176|
000008  8060              STRH     r0,[r4,#2]
;;;81     
;;;82     #if (IMR_MSK & ISTR_CTR)
;;;83       if (wIstr & ISTR_CTR & wInterrupt_Mask)
00000a  8860              LDRH     r0,[r4,#2]  ; wIstr
00000c  4d29              LDR      r5,|L1.180|
00000e  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
000010  4008              ANDS     r0,r0,r1
000012  0400              LSLS     r0,r0,#16
000014  d501              BPL      |L1.26|
;;;84       {
;;;85         /* servicing of the endpoint correct transfer interrupt */
;;;86         /* clear of the CTR flag into the sub */
;;;87         CTR_LP();
000016  f7fffffe          BL       CTR_LP
                  |L1.26|
;;;88     #ifdef CTR_CALLBACK
;;;89         CTR_Callback();
;;;90     #endif
;;;91       }
;;;92     #endif  
;;;93       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;94     #if (IMR_MSK & ISTR_RESET)
;;;95       if (wIstr & ISTR_RESET & wInterrupt_Mask)
00001a  8860              LDRH     r0,[r4,#2]  ; wIstr
00001c  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
00001e  4008              ANDS     r0,r0,r1
000020  0540              LSLS     r0,r0,#21
000022  d505              BPL      |L1.48|
;;;96       {
;;;97         _SetISTR((uint16_t)CLR_RESET);
000024  f64f30ff          MOV      r0,#0xfbff
000028  6030              STR      r0,[r6,#0]
;;;98         Device_Property.Reset();
00002a  4823              LDR      r0,|L1.184|
00002c  6840              LDR      r0,[r0,#4]  ; Device_Property
00002e  4780              BLX      r0
                  |L1.48|
;;;99     #ifdef RESET_CALLBACK
;;;100        RESET_Callback();
;;;101    #endif
;;;102      }
;;;103    #endif
;;;104      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;105    #if (IMR_MSK & ISTR_DOVR)
;;;106      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;107      {
;;;108        _SetISTR((uint16_t)CLR_DOVR);
;;;109    #ifdef DOVR_CALLBACK
;;;110        DOVR_Callback();
;;;111    #endif
;;;112      }
;;;113    #endif
;;;114      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;115    #if (IMR_MSK & ISTR_ERR)
;;;116      if (wIstr & ISTR_ERR & wInterrupt_Mask)
000030  8861              LDRH     r1,[r4,#2]  ; wIstr
000032  8828              LDRH     r0,[r5,#0]  ; wInterrupt_Mask
000034  4001              ANDS     r1,r1,r0
000036  0489              LSLS     r1,r1,#18
000038  d502              BPL      |L1.64|
;;;117      {
;;;118        _SetISTR((uint16_t)CLR_ERR);
00003a  f64d71ff          MOV      r1,#0xdfff
00003e  6031              STR      r1,[r6,#0]
                  |L1.64|
;;;119    #ifdef ERR_CALLBACK
;;;120        ERR_Callback();
;;;121    #endif
;;;122      }
;;;123    #endif
;;;124      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;125    #if (IMR_MSK & ISTR_WKUP)
;;;126      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
000040  8861              LDRH     r1,[r4,#2]  ; wIstr
000042  4001              ANDS     r1,r1,r0
000044  04c8              LSLS     r0,r1,#19
000046  d505              BPL      |L1.84|
;;;127      {
;;;128        _SetISTR((uint16_t)CLR_WKUP);
000048  f64e70ff          MOV      r0,#0xefff
00004c  6030              STR      r0,[r6,#0]
;;;129        Resume(RESUME_EXTERNAL);
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       Resume
                  |L1.84|
;;;130    #ifdef WKUP_CALLBACK
;;;131        WKUP_Callback();
;;;132    #endif
;;;133      }
;;;134    #endif
;;;135      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;136    #if (IMR_MSK & ISTR_SUSP)
;;;137      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
000054  8860              LDRH     r0,[r4,#2]  ; wIstr
000056  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
000058  4008              ANDS     r0,r0,r1
00005a  0500              LSLS     r0,r0,#20
00005c  d50b              BPL      |L1.118|
;;;138      {
;;;139    
;;;140        /* check if SUSPEND is possible */
;;;141        if (fSuspendEnabled)
00005e  4817              LDR      r0,|L1.188|
000060  7800              LDRB     r0,[r0,#0]  ; fSuspendEnabled
000062  b110              CBZ      r0,|L1.106|
;;;142        {
;;;143          Suspend();
000064  f7fffffe          BL       Suspend
000068  e002              B        |L1.112|
                  |L1.106|
;;;144        }
;;;145        else
;;;146        {
;;;147          /* if not possible then resume after xx ms */
;;;148          Resume(RESUME_LATER);
00006a  2002              MOVS     r0,#2
00006c  f7fffffe          BL       Resume
                  |L1.112|
;;;149        }
;;;150        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;151        _SetISTR((uint16_t)CLR_SUSP);
000070  f24f70ff          MOV      r0,#0xf7ff
000074  6030              STR      r0,[r6,#0]
                  |L1.118|
;;;152    #ifdef SUSP_CALLBACK
;;;153        SUSP_Callback();
;;;154    #endif
;;;155      }
;;;156    #endif
;;;157      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;158    #if (IMR_MSK & ISTR_SOF)
;;;159      if (wIstr & ISTR_SOF & wInterrupt_Mask)
000076  8861              LDRH     r1,[r4,#2]  ; wIstr
000078  8828              LDRH     r0,[r5,#0]  ; wInterrupt_Mask
00007a  4001              ANDS     r1,r1,r0
00007c  0589              LSLS     r1,r1,#22
00007e  d506              BPL      |L1.142|
;;;160      {
;;;161        _SetISTR((uint16_t)CLR_SOF);
000080  f64f51ff          MOV      r1,#0xfdff
000084  6031              STR      r1,[r6,#0]
;;;162        bIntPackSOF++;
000086  7821              LDRB     r1,[r4,#0]  ; bIntPackSOF
000088  f1010101          ADD      r1,r1,#1
00008c  7021              STRB     r1,[r4,#0]
                  |L1.142|
;;;163    
;;;164    #ifdef SOF_CALLBACK
;;;165        SOF_Callback();
;;;166    #endif
;;;167      }
;;;168    #endif
;;;169      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;170    #if (IMR_MSK & ISTR_ESOF)
;;;171      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
00008e  8861              LDRH     r1,[r4,#2]  ; wIstr
000090  ea010100          AND      r1,r1,r0
000094  05c8              LSLS     r0,r1,#23
000096  d507              BPL      |L1.168|
;;;172      {
;;;173        _SetISTR((uint16_t)CLR_ESOF);
000098  f64f60ff          MOV      r0,#0xfeff
00009c  6030              STR      r0,[r6,#0]
;;;174        /* resume handling timing is made with ESOFs */
;;;175        Resume(RESUME_ESOF); /* request without change of the machine state */
00009e  e8bd4070          POP      {r4-r6,lr}
0000a2  2007              MOVS     r0,#7
0000a4  f7ffbffe          B.W      Resume
                  |L1.168|
;;;176    
;;;177    #ifdef ESOF_CALLBACK
;;;178        ESOF_Callback();
;;;179    #endif
;;;180      }
;;;181    #endif
;;;182    } /* USB_Istr */
0000a8  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
                          DCD      0x40005c44
                  |L1.176|
                          DCD      ||.data||
                  |L1.180|
                          DCD      wInterrupt_Mask
                  |L1.184|
                          DCD      Device_Property
                  |L1.188|
                          DCD      fSuspendEnabled

                          AREA ||.data||, DATA, ALIGN=1

                  bIntPackSOF
000000  0000              DCB      0x00,0x00
                  wIstr
000002  0000              DCB      0x00,0x00

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_istr.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_istr_c_e9471872____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REVSH|
#line 128
|__asm___10_usb_istr_c_e9471872____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
