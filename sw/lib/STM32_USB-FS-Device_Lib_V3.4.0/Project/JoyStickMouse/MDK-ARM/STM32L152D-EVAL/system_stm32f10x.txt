; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM32L152D-EVAL\system_stm32f10x.o --asm_dir=.\STM32L152D-EVAL\ --list_dir=.\STM32L152D-EVAL\ --depend=.\STM32L152D-EVAL\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152D_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\src\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;992      */
;;;993    static void SetSysClockTo72(void)
000000  4822              LDR      r0,|L1.140|
;;;994    {
;;;995      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2100              MOVS     r1,#0
;;;996      
;;;997      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;998      /* Enable HSE */    
;;;999      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  6802              LDR      r2,[r0,#0]
000006  f4423280          ORR      r2,r2,#0x10000
00000a  6002              STR      r2,[r0,#0]
;;;1000    
;;;1001     /* Wait till HSE is ready and if Time out is reached exit */
;;;1002     do
;;;1003     {
;;;1004       HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;1005       StartUpCounter++;  
;;;1006     } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
00000c  f44f63a0          MOV      r3,#0x500
                  |L1.16|
000010  6802              LDR      r2,[r0,#0]            ;1004
000012  f1010101          ADD      r1,r1,#1              ;1005
000016  f4123f00          TST      r2,#0x20000           ;1004
00001a  d101              BNE      |L1.32|
00001c  4299              CMP      r1,r3
00001e  d1f7              BNE      |L1.16|
                  |L1.32|
;;;1007   
;;;1008     if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000020  6801              LDR      r1,[r0,#0]
000022  0389              LSLS     r1,r1,#14
000024  d530              BPL      |L1.136|
;;;1009     {
;;;1010       HSEStatus = (uint32_t)0x01;
;;;1011     }
;;;1012     else
;;;1013     {
;;;1014       HSEStatus = (uint32_t)0x00;
;;;1015     }  
;;;1016   
;;;1017     if (HSEStatus == (uint32_t)0x01)
;;;1018     {
;;;1019       /* Enable Prefetch Buffer */
;;;1020       FLASH->ACR |= FLASH_ACR_PRFTBE;
000026  491a              LDR      r1,|L1.144|
000028  680a              LDR      r2,[r1,#0]
00002a  f0420210          ORR      r2,r2,#0x10
00002e  600a              STR      r2,[r1,#0]
;;;1021   
;;;1022       /* Flash 2 wait state */
;;;1023       FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000030  680a              LDR      r2,[r1,#0]
000032  f0220203          BIC      r2,r2,#3
000036  600a              STR      r2,[r1,#0]
;;;1024       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
000038  680a              LDR      r2,[r1,#0]
00003a  f0420202          ORR      r2,r2,#2
00003e  600a              STR      r2,[r1,#0]
;;;1025   
;;;1026    
;;;1027       /* HCLK = SYSCLK */
;;;1028       RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000040  6841              LDR      r1,[r0,#4]
000042  6041              STR      r1,[r0,#4]
;;;1029         
;;;1030       /* PCLK2 = HCLK */
;;;1031       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000044  6841              LDR      r1,[r0,#4]
000046  6041              STR      r1,[r0,#4]
;;;1032       
;;;1033       /* PCLK1 = HCLK */
;;;1034       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
000048  6841              LDR      r1,[r0,#4]
00004a  f4416180          ORR      r1,r1,#0x400
00004e  6041              STR      r1,[r0,#4]
;;;1035   
;;;1036   #ifdef STM32F10X_CL
;;;1037       /* Configure PLLs ------------------------------------------------------*/
;;;1038       /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;1039       /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;1040           
;;;1041       RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;1042                                 RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;1043       RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;1044                                RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;1045     
;;;1046       /* Enable PLL2 */
;;;1047       RCC->CR |= RCC_CR_PLL2ON;
;;;1048       /* Wait till PLL2 is ready */
;;;1049       while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;1050       {
;;;1051       }
;;;1052       
;;;1053      
;;;1054       /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
;;;1055       RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;1056       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;1057                               RCC_CFGR_PLLMULL9); 
;;;1058   #else    
;;;1059       /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;1060       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000050  6841              LDR      r1,[r0,#4]
000052  f421117c          BIC      r1,r1,#0x3f0000
000056  6041              STR      r1,[r0,#4]
;;;1061                                           RCC_CFGR_PLLMULL));
;;;1062       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
000058  6841              LDR      r1,[r0,#4]
00005a  f44111e8          ORR      r1,r1,#0x1d0000
00005e  6041              STR      r1,[r0,#4]
;;;1063   #endif /* STM32F10X_CL */
;;;1064   
;;;1065       /* Enable PLL */
;;;1066       RCC->CR |= RCC_CR_PLLON;
000060  6801              LDR      r1,[r0,#0]
000062  f0417180          ORR      r1,r1,#0x1000000
000066  6001              STR      r1,[r0,#0]
                  |L1.104|
;;;1067   
;;;1068       /* Wait till PLL is ready */
;;;1069       while((RCC->CR & RCC_CR_PLLRDY) == 0)
000068  6801              LDR      r1,[r0,#0]
00006a  0189              LSLS     r1,r1,#6
00006c  d5fc              BPL      |L1.104|
;;;1070       {
;;;1071       }
;;;1072       
;;;1073       /* Select PLL as system clock source */
;;;1074       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00006e  6841              LDR      r1,[r0,#4]
000070  f0210103          BIC      r1,r1,#3
000074  6041              STR      r1,[r0,#4]
;;;1075       RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
000076  6841              LDR      r1,[r0,#4]
000078  f0410102          ORR      r1,r1,#2
00007c  6041              STR      r1,[r0,#4]
                  |L1.126|
;;;1076   
;;;1077       /* Wait till PLL is used as system clock source */
;;;1078       while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
00007e  6841              LDR      r1,[r0,#4]
000080  f3c10181          UBFX     r1,r1,#2,#2
000084  2902              CMP      r1,#2
000086  d1fa              BNE      |L1.126|
                  |L1.136|
;;;1079       {
;;;1080       }
;;;1081     }
;;;1082     else
;;;1083     { /* If HSE fails to start-up, the application will have wrong clock 
;;;1084            configuration. User can add here some code to deal with this error */
;;;1085     }
;;;1086   }
000088  4770              BX       lr
;;;1087   #endif
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x40021000
                  |L1.144|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;311      */
;;;312    void SystemCoreClockUpdate (void)
000000  4a15              LDR      r2,|L2.88|
;;;313    {
000002  b510              PUSH     {r4,lr}
;;;314      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
;;;315    
;;;316    #ifdef  STM32F10X_CL
;;;317      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;318    #endif /* STM32F10X_CL */
;;;319    
;;;320    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;321      uint32_t prediv1factor = 0;
;;;322    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;323        
;;;324      /* Get SYSCLK source -------------------------------------------------------*/
;;;325      tmp = RCC->CFGR & RCC_CFGR_SWS;
000004  6850              LDR      r0,[r2,#4]
;;;326      
;;;327      switch (tmp)
;;;328      {
;;;329        case 0x00:  /* HSI used as system clock */
;;;330          SystemCoreClock = HSI_VALUE;
000006  4915              LDR      r1,|L2.92|
000008  f010030c          ANDS     r3,r0,#0xc            ;325
00000c  4814              LDR      r0,|L2.96|
00000e  d003              BEQ      |L2.24|
000010  2b04              CMP      r3,#4                 ;327
000012  d001              BEQ      |L2.24|
000014  2b08              CMP      r3,#8                 ;327
000016  d00b              BEQ      |L2.48|
                  |L2.24|
;;;331          break;
;;;332        case 0x04:  /* HSE used as system clock */
;;;333          SystemCoreClock = HSE_VALUE;
;;;334          break;
;;;335        case 0x08:  /* PLL used as system clock */
;;;336    
;;;337          /* Get PLL clock source and multiplication factor ----------------------*/
;;;338          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
;;;339          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
;;;340          
;;;341    #ifndef STM32F10X_CL      
;;;342          pllmull = ( pllmull >> 18) + 2;
;;;343          
;;;344          if (pllsource == 0x00)
;;;345          {
;;;346            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;347            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;348          }
;;;349          else
;;;350          {
;;;351     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;352           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;353           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;354           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;355     #else
;;;356            /* HSE selected as PLL clock entry */
;;;357            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
;;;358            {/* HSE oscillator clock divided by 2 */
;;;359              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
;;;360            }
;;;361            else
;;;362            {
;;;363              SystemCoreClock = HSE_VALUE * pllmull;
;;;364            }
;;;365     #endif
;;;366          }
;;;367    #else
;;;368          pllmull = pllmull >> 18;
;;;369          
;;;370          if (pllmull != 0x0D)
;;;371          {
;;;372             pllmull += 2;
;;;373          }
;;;374          else
;;;375          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;376            pllmull = 13 / 2; 
;;;377          }
;;;378                
;;;379          if (pllsource == 0x00)
;;;380          {
;;;381            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;382            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;383          }
;;;384          else
;;;385          {/* PREDIV1 selected as PLL clock entry */
;;;386            
;;;387            /* Get PREDIV1 clock source and division factor */
;;;388            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;389            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;390            
;;;391            if (prediv1source == 0)
;;;392            { 
;;;393              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;394              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;395            }
;;;396            else
;;;397            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;398              
;;;399              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;400              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;401              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;402              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;403            }
;;;404          }
;;;405    #endif /* STM32F10X_CL */ 
;;;406          break;
;;;407    
;;;408        default:
;;;409          SystemCoreClock = HSI_VALUE;
;;;410          break;
;;;411      }
;;;412      
;;;413      /* Compute HCLK clock frequency ----------------*/
;;;414      /* Get HCLK prescaler */
;;;415      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000018  6001              STR      r1,[r0,#0]  ; SystemCoreClock
00001a  6851              LDR      r1,[r2,#4]
00001c  4a10              LDR      r2,|L2.96|
00001e  f3c11103          UBFX     r1,r1,#4,#4
000022  1d12              ADDS     r2,r2,#4
000024  5c51              LDRB     r1,[r2,r1]
;;;416      /* HCLK clock frequency */
;;;417      SystemCoreClock >>= tmp;  
000026  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000028  fa22f201          LSR      r2,r2,r1
00002c  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;418    }
00002e  bd10              POP      {r4,pc}
                  |L2.48|
000030  6851              LDR      r1,[r2,#4]            ;338
000032  6853              LDR      r3,[r2,#4]            ;339
000034  f4011170          AND      r1,r1,#0x3c0000       ;338
000038  f04f0402          MOV      r4,#2                 ;342
00003c  f4133f80          TST      r3,#0x10000           ;339
000040  eb044191          ADD      r1,r4,r1,LSR #18      ;342
000044  d002              BEQ      |L2.76|
000046  6853              LDR      r3,[r2,#4]            ;357
000048  039b              LSLS     r3,r3,#14             ;357
00004a  d501              BPL      |L2.80|
                  |L2.76|
00004c  4b05              LDR      r3,|L2.100|
00004e  e000              B        |L2.82|
                  |L2.80|
000050  4b02              LDR      r3,|L2.92|
                  |L2.82|
000052  4359              MULS     r1,r3,r1              ;359
000054  e7e0              B        |L2.24|
;;;419    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40021000
                  |L2.92|
                          DCD      0x007a1200
                  |L2.96|
                          DCD      ||.data||
                  |L2.100|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;217      */
;;;218    void SystemInit (void)
000000  480f              LDR      r0,|L3.64|
;;;219    {
000002  b510              PUSH     {r4,lr}
;;;220      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;221      /* Set HSION bit */
;;;222      RCC->CR |= (uint32_t)0x00000001;
000004  6801              LDR      r1,[r0,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;223    
;;;224      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;225    #ifndef STM32F10X_CL
;;;226      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  6841              LDR      r1,[r0,#4]
00000e  4a0d              LDR      r2,|L3.68|
000010  4011              ANDS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;227    #else
;;;228      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;229    #endif /* STM32F10X_CL */   
;;;230      
;;;231      /* Reset HSEON, CSSON and PLLON bits */
;;;232      RCC->CR &= (uint32_t)0xFEF6FFFF;
000014  6801              LDR      r1,[r0,#0]
000016  4a0c              LDR      r2,|L3.72|
000018  4011              ANDS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;233    
;;;234      /* Reset HSEBYP bit */
;;;235      RCC->CR &= (uint32_t)0xFFFBFFFF;
00001c  6801              LDR      r1,[r0,#0]
00001e  f4212180          BIC      r1,r1,#0x40000
000022  6001              STR      r1,[r0,#0]
;;;236    
;;;237      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;238      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000024  6841              LDR      r1,[r0,#4]
000026  f42101fe          BIC      r1,r1,#0x7f0000
00002a  6041              STR      r1,[r0,#4]
;;;239    
;;;240    #ifdef STM32F10X_CL
;;;241      /* Reset PLL2ON and PLL3ON bits */
;;;242      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;243    
;;;244      /* Disable all interrupts and clear pending bits  */
;;;245      RCC->CIR = 0x00FF0000;
;;;246    
;;;247      /* Reset CFGR2 register */
;;;248      RCC->CFGR2 = 0x00000000;
;;;249    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;250      /* Disable all interrupts and clear pending bits  */
;;;251      RCC->CIR = 0x009F0000;
;;;252    
;;;253      /* Reset CFGR2 register */
;;;254      RCC->CFGR2 = 0x00000000;      
;;;255    #else
;;;256      /* Disable all interrupts and clear pending bits  */
;;;257      RCC->CIR = 0x009F0000;
00002c  f44f011f          MOV      r1,#0x9f0000
000030  6081              STR      r1,[r0,#8]
000032  f7fffffe          BL       SetSysClockTo72
;;;258    #endif /* STM32F10X_CL */
;;;259        
;;;260    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;261      #ifdef DATA_IN_ExtSRAM
;;;262        SystemInit_ExtMemCtl(); 
;;;263      #endif /* DATA_IN_ExtSRAM */
;;;264    #endif 
;;;265    
;;;266      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;267      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;268      SetSysClock();
;;;269    
;;;270    #ifdef VECT_TAB_SRAM
;;;271      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;272    #else
;;;273      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
000036  4905              LDR      r1,|L3.76|
000038  f04f6000          MOV      r0,#0x8000000
00003c  6008              STR      r0,[r1,#0]
;;;274    #endif 
;;;275    }
00003e  bd10              POP      {r4,pc}
;;;276    
                          ENDP

                  |L3.64|
                          DCD      0x40021000
                  |L3.68|
                          DCD      0xf8ff0000
                  |L3.72|
                          DCD      0xfef6ffff
                  |L3.76|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\src\\system_stm32f10x.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f10x_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f10x_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
